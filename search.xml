<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue跨域代理配置 与 浏览器跨域配置</title>
      <link href="/2021/09/05/vue%E8%B7%A8%E5%9F%9F%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE%E4%B8%8E%20%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B7%A8%E5%9F%9F%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/09/05/vue%E8%B7%A8%E5%9F%9F%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE%E4%B8%8E%20%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B7%A8%E5%9F%9F%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="vue跨域代理配置与-浏览器跨域配置"><a href="#vue跨域代理配置与-浏览器跨域配置" class="headerlink" title="vue跨域代理配置与 浏览器跨域配置"></a>vue跨域代理配置与 浏览器跨域配置</h1><h2 id="浏览器报错信息如下"><a href="#浏览器报错信息如下" class="headerlink" title="浏览器报错信息如下"></a>浏览器报错信息如下</h2><p><img src="https://i.loli.net/2021/08/31/mxnHs8G9TrkPdNA.png" alt="跨域报错信息"></p><h2 id="方法一（适用于开发）"><a href="#方法一（适用于开发）" class="headerlink" title="方法一（适用于开发）"></a>方法一（适用于开发）</h2><p>vue.config.js 增加 <strong>disableHostCheck: true</strong></p><blockquote><p>disableHostCheck: true</p></blockquote><p>谷歌为例</p><p>创建快捷方式-&gt;右键属性-&gt;在 <strong>目标</strong>位置后面加上  </p><blockquote><p>–disable-web-security –user-data-dir=D:\MyChromeDevUserData </p></blockquote><p>user-data-dir 中 MyChromeDevUserData 是自己创建的文件夹</p><p><img src="https://i.loli.net/2021/08/31/y8KxTSJn6CeqIOv.png" alt="chrome跨域配置"></p><h2 id="方法2（推荐"><a href="#方法2（推荐" class="headerlink" title="方法2（推荐)"></a>方法2（推荐)</h2><p>在vue.config.js中配置代理</p><p>pathRewrite —- 在项目中找到<code>/api</code>(前)开头的URL，并替换为<code>/api</code>(后）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">port</span>: <span class="number">8200</span>, <span class="comment">// 此处修改你想要的端口号</span></span><br><span class="line">        <span class="attr">proxy</span>: &#123;  <span class="comment">//配置跨域</span></span><br><span class="line">            <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">              <span class="attr">target</span>: <span class="string">&#x27;http://xx.xx.xx.xxx:8100/&#x27;</span>,</span><br><span class="line">              <span class="attr">changOrigin</span>: <span class="literal">true</span>,  <span class="comment">//允许跨域</span></span><br><span class="line">              <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;/api&#x27;</span> </span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置统一的url js文件中，把<strong>baseURL改成地址前缀（关键）</strong></p><p>重点：<strong>baseURL: “/“</strong></p><p>若把baseURL写成改成vue的启动地址，则在<strong>window的nginix上没问题</strong>。但部署在Linux服务器上会出现找不到axios请求后台地址失败</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request = axios.create(&#123;</span><br><span class="line">  <span class="comment">// 根据不同的环境设置baseURL，最终发送请求时的URL为: baseURL + 发送请求时写的URL</span></span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">true</span>, <span class="comment">// 允许携带cookie</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">20000</span> <span class="comment">// 请求超时, 20秒</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经过NGINX反向代理，后端服务器获取不了真实IP</title>
      <link href="/2021/09/01/%E7%BB%8F%E8%BF%87NGINX%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%8E%B7%E5%8F%96%E4%B8%8D%E4%BA%86%E7%9C%9F%E5%AE%9EIP/"/>
      <url>/2021/09/01/%E7%BB%8F%E8%BF%87NGINX%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%8E%B7%E5%8F%96%E4%B8%8D%E4%BA%86%E7%9C%9F%E5%AE%9EIP/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="经过NGINX反向代理，后端服务器获取不了真实IP"><a href="#经过NGINX反向代理，后端服务器获取不了真实IP" class="headerlink" title="经过NGINX反向代理，后端服务器获取不了真实IP"></a>经过NGINX反向代理，后端服务器获取不了真实IP</h1><p><strong>原因：</strong>通过了Apache，Squid，nginx等反向代理软件就不能获取到客户端的真实IP地址了。经过代理以后，由于在客户端和服务之间增加了中间层，因此服务器无法直接拿到客户端的IP(拿到的是中间层的ip)，服务器端应用也无法直接通过转发请求的地址返回给客户端。但是在转发请求的HTTP头信息中，增加了x-forwarded-for信息。用以跟踪原有的客户端IP地址和原来客户端请求的服务器地址。</p><p><strong>解决</strong>：在NGINX反向代理服务器上进行修改</p><p>在nginx配置文件中</p><p>每一个location上加上以下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy_set_header Host $http_host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_set_header X-Forwarded-Proto $scheme;</span><br></pre></td></tr></table></figure><p>重启nginx即可</p><h2 id="springboot获取ip"><a href="#springboot获取ip" class="headerlink" title="springboot获取ip"></a><strong>springboot获取ip</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取登录用户的IP地址</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getIp</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (request == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    String ip = request.getHeader(<span class="string">&quot;X-Requested-For&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (Strings.isEmpty(ip) || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">        ip = request.getHeader(<span class="string">&quot;X-Forwarded-For&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Strings.isEmpty(ip) || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">        ip = request.getHeader(<span class="string">&quot;Proxy-Client-IP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Strings.isEmpty(ip) || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">        ip = request.getHeader(<span class="string">&quot;WL-Proxy-Client-IP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Strings.isEmpty(ip) || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">        ip = request.getHeader(<span class="string">&quot;HTTP_CLIENT_IP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Strings.isEmpty(ip) || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">        ip = request.getHeader(<span class="string">&quot;HTTP_X_FORWARDED_FOR&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Strings.isEmpty(ip) || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">        ip = request.getRemoteAddr();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;0:0:0:0:0:0:0:1&quot;</span>.equals(ip))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ip;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isLocalHost</span><span class="params">(String ip)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;127.0.0.1&quot;</span>.equals(ip) || <span class="string">&quot;localhost&quot;</span>.equals(ip);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析ip地址</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ipAddress</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getIpSource</span><span class="params">(String ipAddress)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://opendata.baidu.com/api.php?query=&quot;</span> + ipAddress + <span class="string">&quot;&amp;co=&amp;resource_id=6006&amp;oe=utf8&quot;</span>);</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(url.openConnection().getInputStream(), <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        String line = <span class="keyword">null</span>;</span><br><span class="line">        StringBuffer result = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            result.append(line);</span><br><span class="line">        &#125;</span><br><span class="line">        reader.close();</span><br><span class="line">        Map map = JSON.parseObject(result.toString(), Map.class);</span><br><span class="line">        List&lt;Map&lt;String, String&gt;&gt; data = (List) map.get(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> data.get(<span class="number">0</span>).get(<span class="string">&quot;location&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> 后端 </category>
          
          <category> springboot </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker部署springboot项目</title>
      <link href="/2021/08/30/docker%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/"/>
      <url>/2021/08/30/docker%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="docker部署springboot项目"><a href="#docker部署springboot项目" class="headerlink" title="docker部署springboot项目"></a>docker部署springboot项目</h1><ol><li><p>编写dockerfile文件和打包maven项目</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java8</span><br><span class="line"><span class="keyword">MAINTAINER</span> chenqitian</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> overseas-study-0.0.1-SNAPSHOT.jar overseas-app.jar</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [java,-jar]</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8100</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [overseas-app.jar]</span></span><br></pre></td></tr></table></figure><p><strong>FROM-</strong>–指定哪个镜像作为新镜像的基础镜像</p><p><strong>MAINTAINER</strong>—-指明该镜像的作者信息</p><p><strong>ADD</strong>—将主机的文件复制到镜像中</p><p><strong>EXPOSE</strong>—暴露镜像的端口供主机做映射</p><p><strong>CMD</strong>—容器启动时需要执行的命令</p><p><img src="https://i.loli.net/2021/08/30/snmpPWb1fzhrTIg.png"></p></li><li><p>上传服务器</p><p>使用xftp，把dockerfile文件和jar包上传到服务器</p></li><li><p>打包成镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t [镜像名]</span><br></pre></td></tr></table></figure><p>docker images查看所安装的镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></li><li><p>运行构建的镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8100:8100 [镜像名]</span><br></pre></td></tr></table></figure></li><li><p>完成</p><p>浏览器访问  xx.xx.xx.xx:8100即可</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> 后端 </category>
          
          <category> springboot </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx+docker部署vue-cil项目</title>
      <link href="/2021/08/27/Nginx+docker%E9%83%A8%E7%BD%B2vue-cil%E9%A1%B9%E7%9B%AE/"/>
      <url>/2021/08/27/Nginx+docker%E9%83%A8%E7%BD%B2vue-cil%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Nginx-docker部署vue-cil项目"><a href="#Nginx-docker部署vue-cil项目" class="headerlink" title="Nginx+docker部署vue-cil项目"></a>Nginx+docker部署vue-cil项目</h1><ol><li><p>编写dockerfile文件</p><p><strong>FROM-</strong>–指定哪个镜像作为新镜像的基础镜像</p><p><strong>MAINTAINER</strong>—-指明该镜像的作者信息</p><p><strong>COPY</strong>—将主机的文件复制到镜像内</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"><span class="keyword">MAINTAINER</span> chenqitian</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> dist/ /usr/share/nginx/html/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> default.conf /etc/nginx/conf.d/default.conf</span></span><br></pre></td></tr></table></figure></li><li><p>打包vue-cil项目</p><p>cmd中输入以下命令，打包生成dist文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></li><li><p>修改nginx配置文件<code>default.conf </code></p></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       8200;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /usr/share/nginx/html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">try_files $uri $uri/ @router;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">location @router &#123;</span><br><span class="line">            rewrite ^.*$ /index.html last;</span><br><span class="line">        &#125;</span><br><span class="line">location ^~ /api &#123;</span><br><span class="line">            proxy_pass   http://47.106.128.108:8100;</span><br><span class="line">            add_header Access-Control-Allow-Methods *;</span><br><span class="line">            add_header Access-Control-Max-Age 3600;</span><br><span class="line">            add_header Access-Control-Allow-Credentials true;</span><br><span class="line">            add_header Access-Control-Allow-Origin $http_origin;</span><br><span class="line">            add_header Access-Control-Allow-Headers $http_access_control_request_headers;</span><br><span class="line">            if ($request_method = OPTIONS ) &#123;</span><br><span class="line">                return 200;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>3.上传到服务器</p><p>​    使用xftp，把dockerfile文件和default.conf上传到服务器</p><p>4.打包成镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t [镜像名]</span><br></pre></td></tr></table></figure><p>5.docker images查看所安装的镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>6.运行构建的镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8200:8200 [镜像名]</span><br></pre></td></tr></table></figure><p>7.完成</p><p>​    浏览器访问  xx.xx.xx.xx:8200即可</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">查看docker进程 -a（全部，包括不正常的）</span><br><span class="line">docker ps -a</span><br><span class="line">删除容器</span><br><span class="line">docker rm [容器id]</span><br><span class="line">删除镜像</span><br><span class="line">docker rmi [镜像id]</span><br><span class="line">查看镜像</span><br><span class="line">docker images</span><br><span class="line">进入容器</span><br><span class="line">docker <span class="built_in">exec</span> -it [容器id] /bin/bash</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
          <category> docker </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> nginx </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows配置Nginx部署vue-cil项目</title>
      <link href="/2021/08/25/windows+Nginx%E9%83%A8%E7%BD%B2vue-cil%E9%A1%B9%E7%9B%AE/"/>
      <url>/2021/08/25/windows+Nginx%E9%83%A8%E7%BD%B2vue-cil%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Windows配置Nginx部署vue-cil项目"><a href="#Windows配置Nginx部署vue-cil项目" class="headerlink" title="Windows配置Nginx部署vue-cil项目"></a>Windows配置Nginx部署vue-cil项目</h1><ol><li>nginx下载</li></ol><p><a href="https://nginx.org/en/download.html">nginx下载地址</a></p><ol start="2"><li>打包vue-cil项目</li></ol><p>cmd中输入以下命令，打包生成dist文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><ol start="3"><li>.修改nginx配置文件<code>nginx/conf/nginx.conf </code> </li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8200;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">try_files $uri $uri/ @router;</span><br><span class="line">        &#125;</span><br><span class="line">location @router &#123;</span><br><span class="line">rewrite ^.*$ /index.html last;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ^~ /api &#123;</span><br><span class="line">            proxy_pass   http://xx.xx.xxx.xxx:8100;</span><br><span class="line">            add_header Access-Control-Allow-Methods *;</span><br><span class="line">            add_header Access-Control-Max-Age 3600;</span><br><span class="line">            add_header Access-Control-Allow-Credentials true;</span><br><span class="line">            add_header Access-Control-Allow-Origin $http_origin;</span><br><span class="line">            add_header Access-Control-Allow-Headers $http_access_control_request_headers;</span><br><span class="line">            if ($request_method = OPTIONS ) &#123;</span><br><span class="line">                return 200;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li><p>把打包好的dist放入<code>nginx/html</code>文件夹中</p></li><li><p>CMD启动nginx</p></li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start nginx</span><br></pre></td></tr></table></figure><ol start="6"><li>访问localhost:8200成功</li></ol><h2 id="nginx常用命令"><a href="#nginx常用命令" class="headerlink" title="nginx常用命令"></a>nginx常用命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">查看帮助信息</span><br><span class="line">nginx -h</span><br><span class="line"></span><br><span class="line">查看nginx版本(小写字母v)</span><br><span class="line">nginx -v</span><br><span class="line"></span><br><span class="line">除版本信息外还显示配置参数信息(大写字母V)</span><br><span class="line">nginx -V</span><br><span class="line"></span><br><span class="line">启动nginx</span><br><span class="line">start nginx</span><br><span class="line"></span><br><span class="line">指定配置文件启动nginx</span><br><span class="line">start nginx -c filename</span><br><span class="line"></span><br><span class="line">关闭nginx，完整有序的停止nginx，保存相关信息</span><br><span class="line">nginx -s quit</span><br><span class="line"></span><br><span class="line">关闭nginx，快速停止nginx，可能并不保存相关信息</span><br><span class="line">nginx -s stop</span><br><span class="line"></span><br><span class="line">重新载入nginx，当配置信息修改需要重新加载配置是使用</span><br><span class="line">nginx -s reload</span><br><span class="line"></span><br><span class="line">重新打开日志文件</span><br><span class="line">nginx -s reopen</span><br><span class="line"></span><br><span class="line">测试nginx配置文件是否正确</span><br><span class="line">nginx -t -c filename</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swagger3整合oauth2 认证token</title>
      <link href="/2021/08/24/swagger3%E6%95%B4%E5%90%88oauth2%20%E8%AE%A4%E8%AF%81token/"/>
      <url>/2021/08/24/swagger3%E6%95%B4%E5%90%88oauth2%20%E8%AE%A4%E8%AF%81token/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="swagger3整合oauth2-认证token"><a href="#swagger3整合oauth2-认证token" class="headerlink" title="swagger3整合oauth2 认证token"></a>swagger3整合oauth2 认证token</h1><h2 id="引入swagger3依赖"><a href="#引入swagger3依赖" class="headerlink" title="引入swagger3依赖"></a>引入swagger3依赖</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--Swagger3 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.0</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="swagger配置文件编写"><a href="#swagger配置文件编写" class="headerlink" title="swagger配置文件编写"></a>swagger配置文件编写</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30)</span><br><span class="line">                .enable(enable)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .groupName(<span class="string">&quot;xx项目接口&quot;</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//配置要扫描接口的方式</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.os&quot;</span>))</span><br><span class="line">                .build()</span><br><span class="line"></span><br><span class="line">                .securitySchemes(securitySchemes())</span><br><span class="line">                .securityContexts(securityContexts());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证的安全上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;SecurityScheme&gt; <span class="title">securitySchemes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;SecurityScheme&gt; securitySchemes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        securitySchemes.add(<span class="keyword">new</span> ApiKey(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;header&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> securitySchemes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权信息全局应用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;SecurityContext&gt; <span class="title">securityContexts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;SecurityContext&gt; securityContexts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        securityContexts.add(SecurityContext.builder()</span><br><span class="line">                .securityReferences(defaultAuth())</span><br><span class="line">                .forPaths(PathSelectors.any()).build());</span><br><span class="line">        <span class="keyword">return</span> securityContexts;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;SecurityReference&gt; <span class="title">defaultAuth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AuthorizationScope authorizationScope = <span class="keyword">new</span> AuthorizationScope(<span class="string">&quot;global&quot;</span>, <span class="string">&quot;accessEverything&quot;</span>);</span><br><span class="line">        AuthorizationScope[] authorizationScopes = <span class="keyword">new</span> AuthorizationScope[<span class="number">1</span>];</span><br><span class="line">        authorizationScopes[<span class="number">0</span>] = authorizationScope;</span><br><span class="line">        List&lt;SecurityReference&gt; securityReferences = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        securityReferences.add(<span class="keyword">new</span> SecurityReference(<span class="string">&quot;Authorization&quot;</span>, authorizationScopes));</span><br><span class="line">        <span class="keyword">return</span> securityReferences;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>请求头：Authorization</p><h2 id="swagger中的效果展示"><a href="#swagger中的效果展示" class="headerlink" title="swagger中的效果展示"></a>swagger中的效果展示</h2><p><img src="https://i.loli.net/2021/08/22/FQEVo2rBAiHRk1J.png" alt="image-20210630123347451"></p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> 后端 </category>
          
          <category> SpringBoot </category>
          
          <category> SpringSecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringSecurity </tag>
            
            <tag> 后端 </tag>
            
            <tag> token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot启动报错（webSecurity匿名问题）</title>
      <link href="/2021/08/22/springboot%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99%EF%BC%88webSecurity%E5%8C%BF%E5%90%8D%E9%97%AE%E9%A2%98%EF%BC%89/"/>
      <url>/2021/08/22/springboot%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99%EF%BC%88webSecurity%E5%8C%BF%E5%90%8D%E9%97%AE%E9%A2%98%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="springboot启动报错（webSecurity匿名问题）"><a href="#springboot启动报错（webSecurity匿名问题）" class="headerlink" title="springboot启动报错（webSecurity匿名问题）"></a>springboot启动报错（webSecurity匿名问题）</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘springSecurityFilterChain’ defined in <span class="class"><span class="keyword">class</span> <span class="title">path</span> <span class="title">resource</span> [<span class="title">org</span>/<span class="title">springframework</span>/<span class="title">security</span>/<span class="title">config</span>/<span class="title">annotation</span>/<span class="title">web</span>/<span class="title">configuration</span>/<span class="title">WebSecurityConfiguration</span>.<span class="title">class</span>]: <span class="title">Bean</span> <span class="title">instantiation</span> <span class="title">via</span> <span class="title">factory</span> <span class="title">method</span> <span class="title">failed</span></span>; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.servlet.Filter]: Factory method ‘springSecurityFilterChain’ threw exception; nested exception is java.lang.IllegalStateException: An incomplete mapping was found <span class="keyword">for</span> []. <span class="function">Try completing it with something like <span class="title">requestUrls</span><span class="params">()</span>..<span class="title">hasRole</span><span class="params">(‘USER’)</span></span></span><br></pre></td></tr></table></figure><h2 id="在WebSecurityConfig-SecurityConfig-中配置"><a href="#在WebSecurityConfig-SecurityConfig-中配置" class="headerlink" title="在WebSecurityConfig(SecurityConfig)中配置"></a>在WebSecurityConfig(SecurityConfig)中配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.authorizeRequests()</span><br><span class="line">                <span class="comment">//放行swagger</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/swagger-ui.html&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/swagger-ui/*&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/swagger-resources/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/v2/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/v3/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/img.icons/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/webjars/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/doc.html&quot;</span>).permitAll()</span><br><span class="line">    <span class="comment">//只有匿名用户才能访问，其他都要登录</span></span><br><span class="line">                <span class="comment">// 所有加 AnonymousAccess 注解的请求都允许匿名访问</span></span><br><span class="line">                .antMatchers(getAnonymousUrls()).anonymous();</span><br><span class="line">                <span class="comment">//所有请求必须被认证（登录）</span></span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">                </span><br></pre></td></tr></table></figure><p><strong>方法一</strong>: antMatchers(getAnonymousUrls()).anonymous(); 和anyRequest().authenticated(); 同时有</p><p><strong>方法二</strong>: antMatchers(getAnonymousUrls()).anonymous(); 和至少用一个方法上有@AnonymousAccess注解</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> 后端 </category>
          
          <category> SpringBoot </category>
          
          <category> SpringSecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringSecurity </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot SpringSecurity 整合knife4j, Swagger3问题</title>
      <link href="/2021/08/20/Springboot%20SpringSecurity%20%E6%95%B4%E5%90%88knife4j,%20Swagger3%E9%97%AE%E9%A2%98/"/>
      <url>/2021/08/20/Springboot%20SpringSecurity%20%E6%95%B4%E5%90%88knife4j,%20Swagger3%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Springboot-SpringSecurity-整合knife4j-Swagger3问题"><a href="#Springboot-SpringSecurity-整合knife4j-Swagger3问题" class="headerlink" title="Springboot SpringSecurity 整合knife4j, Swagger3问题"></a>Springboot SpringSecurity 整合knife4j, Swagger3问题</h1><p>版本说明： swagger3版本3.0.0，knife4j版本3.0.2</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--swagger3--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>SpringSecurity放行静态资源</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.authorizeRequests()</span><br><span class="line">                <span class="comment">//放行swagger</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/swagger-ui.html&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/swagger-ui/*&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/swagger-resources/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/v2/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/v3/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/img.icons/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/webjars/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/doc.html&quot;</span>).permitAll()</span><br></pre></td></tr></table></figure><p>Swagger3Config 继承 WebMvcConfigurationSupport 过滤</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.</span><br><span class="line">                addResourceHandler(<span class="string">&quot;/swagger-ui/**&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/springfox-swagger-ui/&quot;</span>)</span><br><span class="line">                .resourceChain(<span class="keyword">false</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;doc.html&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>开启注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableOpenApi</span> <span class="comment">//swagger3</span></span><br><span class="line"><span class="meta">@EnableKnife4j</span> <span class="comment">//knife4j 3.0.2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger3Config</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> 后端 </category>
          
          <category> SpringBoot </category>
          
          <category> SpringSecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringSecurity </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建React-app应用时create-react-app卡住超慢的解决办法</title>
      <link href="/2021/08/16/%E6%9E%84%E5%BB%BAReact-app%E5%BA%94%E7%94%A8%E6%97%B6create-react-app%E5%8D%A1%E4%BD%8F%E8%B6%85%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2021/08/16/%E6%9E%84%E5%BB%BAReact-app%E5%BA%94%E7%94%A8%E6%97%B6create-react-app%E5%8D%A1%E4%BD%8F%E8%B6%85%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="构建React-app应用时create-react-app卡住超慢的解决办法"><a href="#构建React-app应用时create-react-app卡住超慢的解决办法" class="headerlink" title="构建React-app应用时create-react-app卡住超慢的解决办法"></a>构建React-app应用时create-react-app卡住超慢的解决办法</h1><h2 id="解决办法：npm换源（淘宝镜像）"><a href="#解决办法：npm换源（淘宝镜像）" class="headerlink" title="解决办法：npm换源（淘宝镜像）"></a>解决办法：npm换源（淘宝镜像）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line">-- 配置后可通过下面方式来验证是否成功</span><br><span class="line">npm config get registry</span><br><span class="line">-- 显示出上述地址的话就是更换成功</span><br></pre></td></tr></table></figure><h2 id="再次尝试构建"><a href="#再次尝试构建" class="headerlink" title="再次尝试构建"></a>再次尝试构建</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">creat-react-app first-react-app（app名称）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> 前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>佛山探店 | 有趣好玩switch小店</title>
      <link href="/2021/08/10/%E4%BD%9B%E5%B1%B1%E6%8E%A2%E5%BA%97-BlackPearl/"/>
      <url>/2021/08/10/%E4%BD%9B%E5%B1%B1%E6%8E%A2%E5%BA%97-BlackPearl/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="有趣好玩switch小店🎮"><a href="#有趣好玩switch小店🎮" class="headerlink" title="有趣好玩switch小店🎮"></a>有趣好玩switch小店🎮</h1><p>🏠地点：建新路103号三座首层B号二楼（祖庙铂顿城隔壁-三合凉拌楼上）</p><ul><li>⭐环境很好，干净整洁</li><li>👾游戏也有十几个</li><li>✨店内装饰很游戏风</li><li>✨有很多的小摆设</li><li>💵￥50/2小时</li></ul><p><img src="https://i.loli.net/2021/08/14/86QUfN5An2tSxwj.jpg"></p><p><img src="https://i.loli.net/2021/08/14/A7I4m6gRByUMZaG.jpg"></p><p><img src="https://i.loli.net/2021/08/14/EcAPWbCZvQ4gdxo.jpg"></p><p><img src="https://i.loli.net/2021/08/14/1KaAX6pG9nJjrPo.jpg" alt="game1.jpg"></p><p><img src="https://i.loli.net/2021/08/14/tlr2WHIMS5q8kjc.jpg" alt="game2.jpg"></p><p><img src="https://i.loli.net/2021/08/14/sHJPUw2hIXBlOKz.jpg" alt="game3.jpg"></p><p><img src="https://i.loli.net/2021/08/14/bxBKPv69nJyTErs.jpg"></p><p>一次值得的体验，游戏爱好者推荐来玩哈👍</p>]]></content>
      
      
      <categories>
          
          <category> 探店 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 探店 </tag>
            
            <tag> 日常生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git踩坑 - 1</title>
      <link href="/2021/08/06/git%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/08/06/git%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="git踩坑-1"><a href="#git踩坑-1" class="headerlink" title="git踩坑 - 1"></a>git踩坑 - 1</h1><h4 id="git仓库大文件push失败报413-Request-Entity-Too-Large-问题解决办法"><a href="#git仓库大文件push失败报413-Request-Entity-Too-Large-问题解决办法" class="headerlink" title="git仓库大文件push失败报413 Request Entity Too Large 问题解决办法"></a>git仓库大文件push失败报413 Request Entity Too Large 问题解决办法</h4><p>使用https方式拉取的git仓库，在push文件时报错Gitlab error push files 413 Request Entity Too Large</p><p>尝试了如下</p><ol><li>增大https方式的post缓存   (不成功)</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config http.postBuffer 524288000</span><br></pre></td></tr></table></figure><p>  2.修改本地仓库的https方式为ssh （成功）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote set-url origin ssh地址</span><br></pre></td></tr></table></figure><hr><h4 id="git-pull遇到错误：error-Your-local-changes-to-the-following-files-would-be-overwritten-by-merge"><a href="#git-pull遇到错误：error-Your-local-changes-to-the-following-files-would-be-overwritten-by-merge" class="headerlink" title="git pull遇到错误：error: Your local changes to the following files would be overwritten by merge"></a>git pull遇到错误：error: Your local changes to the following files would be overwritten by merge</h4><p><strong>原因：本地项目有修改，不能更新</strong></p><p><strong>方法1</strong>: 如果你想保留刚才本地修改的代码，并把git服务器上的代码pull到本地（本地刚才修改的代码将会被暂时封存起来）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash </span><br><span class="line"></span><br><span class="line">git pull origin master </span><br><span class="line"></span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><p>服务器上的代码更新到了本地，而且你本地修改的代码也没有被覆盖，之后使用add，commit，push 命令即可更新本地代码到服务器了。</p><p><strong>方法2</strong>: 如果你想完全地覆盖本地的代码，只保留服务器端代码，则直接回退到上一个版本，再进行pull</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset *--hard* </span><br><span class="line"></span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><p><strong>方法3</strong>:合并代码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;xxx&quot;</span></span><br><span class="line">git pull</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><hr><h4 id="命令Hexo-d上传GitHub超时报错"><a href="#命令Hexo-d上传GitHub超时报错" class="headerlink" title="命令Hexo d上传GitHub超时报错"></a>命令Hexo d上传GitHub超时报错</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">atal: unable to access <span class="string">&#x27;https://github.com/.......&#x27;</span>: OpenSSL SSL_read: Connection was reset, errno 10054</span><br></pre></td></tr></table></figure><p>产生原因：一般是这是因为服务器的SSL证书没有经过第三方机构的签署，所以报错</p><p>参考网上解决办法：解除ssl验证后  (无效果)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.sslVerify &quot;false&quot;</span><br></pre></td></tr></table></figure><p>或出现错误</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/.../.git&#x27;</span>: Could not resolve host: github.com</span><br></pre></td></tr></table></figure><p>参考网上解决办法：解除代理  (无效果)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy </span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure><p>或出现错误</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/Chankeitin/Chankeitin.github.io.git/&#x27;</span>: Failed to connect to github.com port 443: Timed out</span><br></pre></td></tr></table></figure><p>或出现错误</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/Chankeitin/Chankeitin.github.io.git/&#x27;</span>: Empty reply from server</span><br><span class="line">FATAL &#123;</span><br><span class="line">  ......</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something<span class="string">&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span></span><br></pre></td></tr></table></figure><p>最后统一解决：</p><p><strong>重复运行命令，直到push成功</strong></p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 开发工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aplayer报错解决方案</title>
      <link href="/2021/08/05/Aplay%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/"/>
      <url>/2021/08/05/Aplay%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>hexo - g 报错如下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">Error: [hexo-tag-aplayer] Meting support is disabled, cannot resolve the meting tags properly.</span><br><span class="line">    at throwError (E:\Node_JS_Hexo\node_modules\hexo-tag-aplayer\common\util.js:18:9)</span><br><span class="line">    at Object.&lt;anonymous&gt; (E:\Node_JS_Hexo\node_modules\hexo-tag-aplayer\index.js:160:28)</span><br><span class="line">    at NunjucksTag._run (E:\Node_JS_Hexo\node_modules\hexo\lib\extend\tag.js:120:18)</span><br><span class="line">    at NunjucksTag.run (E:\Node_JS_Hexo\node_modules\hexo\lib\extend\tag.js:116:15)</span><br><span class="line">    at Template.root [as rootRenderFunc] (eval at _compile (E:\Node_JS_Hexo\node_modules\nunjucks\src\environment.js:617:18), &lt;anonymous&gt;:29:66)</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p>请在 Hexo 配置文件 _config.yml 中设置即可： （<strong>切记是hexo的配置文件，不是themes文件夹里面的）</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aplayer:</span>  </span><br><span class="line"><span class="attr">meting:</span> <span class="literal">true</span> </span><br></pre></td></tr></table></figure><p>请不要配置：（这个是给Meting.js用的，Aplayer误设置会导致变成空白的） </p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Aplayer:</span></span><br><span class="line"><span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建Hexo博客</title>
      <link href="/2021/08/04/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/08/04/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="快速搭建Hexo博客"><a href="#快速搭建Hexo博客" class="headerlink" title="快速搭建Hexo博客"></a>快速搭建Hexo博客</h1><h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h2><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>需要先安装下列应用程序</p><ul><li><p><a href="http://nodejs.org/">Node.js</a></p></li><li><p><a href="http://git-scm.com/">Git</a></p></li><li><p>notepad++(作为编辑器 <strong>可选</strong>)</p></li></ul><h3 id="安装hexo脚手架"><a href="#安装hexo脚手架" class="headerlink" title="安装hexo脚手架"></a>安装hexo脚手架</h3><p>打开cmd，输入下面命令全局安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>用<code>hexo -v</code>查看一下版本，验证是否安装成功</p><p>创建一个文件夹blog，然后<code>cd</code>到这个文件夹下</p><p>输入命令初始化hexo项目</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">或 hexo init blog(博客名)</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹目录下有：</p><ul><li><p>node_modules: 依赖包</p></li><li><p>public：存放生成的静态页面</p></li><li><p>scaffolds：生成文章的一些模板</p></li><li><p>source：用来存放你的文章</p></li><li><p>themes：主题</p></li><li><p>_config.yml: 博客的配置文件</p></li></ul><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h3 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>打开hexo的服务，在浏览器输入localhost:4000就可以看到你默认生成的博客了。</p><p>使用ctrl+c可以把服务关掉。</p><h3 id="GitHub-Gitee创建个人仓库"><a href="#GitHub-Gitee创建个人仓库" class="headerlink" title="GitHub/Gitee创建个人仓库"></a>GitHub/Gitee创建个人仓库</h3><p>首先，你先要有一个GitHub/Gitee账户，去注册一个吧。</p><p>注册完登录后，新建仓库</p><p>创建一个和你用户名相同的仓库，后面加.github.io/gitee.io，只有这样，将来要部署到GitHub page/Gitee page的时候，才会被识别，也就是xxxx.github.io/xxxx.gitee.io，其中xxx就是你注册的用户名。</p><h3 id="将hexo部署到GitHub"><a href="#将hexo部署到GitHub" class="headerlink" title="将hexo部署到GitHub"></a>将hexo部署到GitHub</h3><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为</p><p>username为GitHub用户名</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>安装deploy-git ，也就是部署的命令。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>输入命令进行部署</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>过一会儿就可以在<code>http://username.github.io</code> 这个网站看到你的博客了！！</p><hr><h2 id="主题模板"><a href="#主题模板" class="headerlink" title="主题模板"></a>主题模板</h2><h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p>在<a href="https://hexo.io/themes/%E5%AE%98%E7%BD%91%E4%B8%AD%E9%A2%84%E8%A7%88%E5%96%9C%E6%AC%A2%E7%9A%84%E4%B8%BB%E9%A2%98%EF%BC%8C%E5%9C%A8GitHub%E4%B8%AD%E6%90%9C%E7%B4%A2%E4%B8%BB%E9%A2%98%E5%90%8D%EF%BC%8C%E5%B9%B6clone%E5%88%B0%E5%8D%9A%E5%AE%A2%E7%9B%AE%E5%BD%95%E7%9A%84themes%E6%96%87%E4%BB%B6%E5%A4%B9%E5%86%85%EF%BC%88%E5%8F%82%E8%80%83%E8%B7%AF%E5%BE%84%EF%BC%9Ablog/themes/%EF%BC%89">https://hexo.io/themes/官网中预览喜欢的主题，在GitHub中搜索主题名，并clone到博客目录的themes文件夹内（参考路径：blog/themes/）</a></p><p>以Butterfly主题为例</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/jerryc127/hexo-theme-butterfly</span><br></pre></td></tr></table></figure><p>并在<code>_config.yml</code>中配置该主题,<code>ctrl+f</code>搜索关键字<code>theme</code>,把值修改成butterfly（themes中克隆模板的文件夹名）</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p>如果没有 pug 以及 stylus 的渲染器，需要安装</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-renderer-pug</span> <span class="string">hexo-renderer-stylus</span> <span class="string">--save</span></span><br></pre></td></tr></table></figure><p>重新编译启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>访问localhost:4000，成功即可</p><hr><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">clean</span> <span class="string">清除了之前生成的东西</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">g</span> <span class="string">编译代码</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">d</span> <span class="string">部署文章</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">n</span> <span class="string">page</span> <span class="string">xx</span> <span class="string">新建页面</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">new</span> <span class="string">xx</span> <span class="string">新建博客文章</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客建设及踩坑</title>
      <link href="/2021/08/04/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE%E5%8F%8A%E8%B8%A9%E5%9D%91/"/>
      <url>/2021/08/04/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE%E5%8F%8A%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="Hexo建设"><a href="#Hexo建设" class="headerlink" title="Hexo建设"></a>Hexo建设</h3><h4 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h4><h5 id="设置导航栏（主题里的-config-yml）"><a href="#设置导航栏（主题里的-config-yml）" class="headerlink" title="设置导航栏（主题里的_config.yml）"></a>设置导航栏（主题里的<code>_config.yml</code>）</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">   <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">   <span class="string">归档:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">   <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">   <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">   <span class="string">娱乐||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">     <span class="string">音乐:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">     <span class="string">电影:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">   <span class="string">友链:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">   <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><h5 id="配置网站样式"><a href="#配置网站样式" class="headerlink" title="配置网站样式"></a>配置网站样式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Image (圖片設置)</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line"># Favicon（網站圖標）</span><br><span class="line">favicon: /img/favicon.png</span><br><span class="line"></span><br><span class="line"># Avatar (頭像)</span><br><span class="line">avatar:</span><br><span class="line">  img: /img/avatar.png</span><br><span class="line">  effect: false</span><br><span class="line"></span><br><span class="line"># the banner image of home page</span><br><span class="line">……</span><br></pre></td></tr></table></figure><h5 id="设置主页名句"><a href="#设置主页名句" class="headerlink" title="设置主页名句"></a>设置主页名句</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">subtitle:</span><br><span class="line">  enable: true</span><br><span class="line">  # Typewriter Effect (打字效果)</span><br><span class="line">  effect: true</span><br><span class="line">  # loop (循環打字)</span><br><span class="line">  loop: true</span><br><span class="line">  # source調用第三方服務</span><br><span class="line">  # source: false 關閉調用</span><br><span class="line">  # source: 1  調用搏天api的隨機語錄（簡體） https://api.btstu.cn/</span><br><span class="line">  # source: 2  調用一言網的一句話（簡體） https://hitokoto.cn/</span><br><span class="line">  # source: 3  調用一句網（簡體） http://yijuzhan.com/</span><br><span class="line">  # source: 4  調用今日詩詞（簡體） https://www.jinrishici.com/</span><br><span class="line">  # subtitle 會先顯示 source , 再顯示 sub 的內容</span><br><span class="line">  source: true</span><br><span class="line">  # 如果有英文逗號&#x27; , &#x27;,請使用轉義字元 &amp;#44;</span><br><span class="line">  # 如果有英文雙引號&#x27; &quot; &#x27;,請使用轉義字元 &amp;quot;</span><br><span class="line">  # 開頭不允許轉義字元，如需要，請把整個句子用雙引號包住</span><br><span class="line">  # 如果關閉打字效果，subtitle只會顯示sub的第一行文字</span><br><span class="line">  sub: </span><br><span class="line">    - 有德必有勇，正直的人绝不胆怯。</span><br><span class="line">    - 即使慢，驰而不息，纵会落后，纵会失败，但一定可以达到他所向的目标。</span><br></pre></td></tr></table></figure><h5 id="配置社交图标"><a href="#配置社交图标" class="headerlink" title="配置社交图标"></a>配置社交图标</h5><p>在阿里巴巴矢量图标库里面，把需要的图标添加购物车，在新建项目，在购物车中将图标添加到项目中,在主题配置文件中修改：</p><p>把样式添加到页头</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Inject</span><br><span class="line"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span><br><span class="line"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span><br><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">   - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/iconfont.css&quot;&gt; #引入阿里巴巴矢量图库</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">social:</span><br><span class="line">  fab fa-github: https://github.com/xxxxx || Github</span><br><span class="line">  iconfont gitee: https://gitee.com/××× ||Gitee</span><br></pre></td></tr></table></figure><h4 id="文章格式"><a href="#文章格式" class="headerlink" title="文章格式"></a>文章格式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:【必需】页面标题</span><br><span class="line">date:【必需】页面创建日期</span><br><span class="line">type: 【必需】标籤、分类和友情链接三个页面需要配置</span><br><span class="line">updated:【可选】页面更新日期</span><br><span class="line">description:【可选】页面描述</span><br><span class="line">keywords: 【可选】页面关键字</span><br><span class="line">comments: 【可选】显示页面评论模块 (默认 true)</span><br><span class="line">top_img: 【可选】页面顶部图片</span><br><span class="line">mathjax: 【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</span><br><span class="line">katex: 【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)</span><br><span class="line">aside: 【可选】显示侧边栏 (默认 true)</span><br><span class="line">aplayer: 【可选】在需要的页面加载 aplayer 的 js 和 css, 请参考文章下面的音乐 配置</span><br><span class="line">highlight_shrink: 【可选】配置代码框是否展开 (true/false)(默认为设置中 highlight_shrink 的配置)</span><br><span class="line">cover:封面图片的url</span><br><span class="line"></span><br><span class="line">copyright: true</span><br><span class="line">copyright_author: xxxx</span><br><span class="line">copyright_author_href: https://github.com/Chankeitin</span><br><span class="line">copyright_url: https://chankeitin.github.io/</span><br><span class="line">copyright_info: 此文章版权归Chankeitin所有，如有转载，请註明来自原作者</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>copyright -&gt; 复制内容携带作者信息</p><p>cover后面输入你想要的封面图片的url</p><p>top_img后面加上你想要的顶部图片的url</p><h4 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h4><p>友情链接的添加需要在完成该操作的基础上，新建<code>source/_data/link.yml</code>文件，添加如下内容</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">那些人，那些事，那些开发者工具</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Chankeitin</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://chankeitin.github.io</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2021/08/05/cZd4CF96pgqrQBH.jpg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">想成为全栈程序猿</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MyBatis-Plus</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://baomidou.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://baomidou.com/img/logo.svg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">为简化开发而生</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Spring</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://spring.io/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">http://c.biancheng.net/uploads/allimg/210701/1-210F1141343544.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">Spring</span> <span class="string">makes</span> <span class="string">Java</span> <span class="string">simple.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://hexo.io/zh-tw/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">快速、简单且强大的博客框架</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
